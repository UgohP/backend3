Node.js File System Module

Node.js as a File Server
-The Node.js file system module allows you to work with the file system on your computer.

-To include the File System module, use the require() method:

for exmaple: const fs = require('fs');

Common use for the File System module:

-Read files
-Create files
-Update files
-Delete files
-Rename files

Create Files
-The File System module has methods for creating new files:

- fs.appendFile()
- fs.open()
- fs.writeFile()

--The fs.appendFile() method appends specified content to a file. 
If the file does not exist, the file will be created:
--The fs.open() method takes a "flag" as the second argument, 
if the flag is "w" for "writing", 
the specified file is opened for writing. 
If the file does not exist, an empty file is created:
--The fs.writeFile() method replaces the specified file and 
content if it exists. If the file does not exist, 
a new file, containing the specified content, will be created:

Update Files:

The File System module has methods for updating files:

-fs.appendFile()
-fs.writeFile()
-The fs.appendFile() method appends the specified content at the end of the specified file:
-The fs.writeFile() method replaces the specified file and content:

Delete Files
-To delete a file with the File System module,  use the fs.unlink() method.

-The fs.unlink() method deletes the specified file:

Rename Files
-To rename a file with the File System module,  use the fs.rename() method.
-The fs.rename() method renames the specified file:

In Node.js, readFile, writeFile, readFileSync, and writeFileSync 
are used to handle file operations. 
The key difference between them lies in their synchronous (blocking) 
vs. asynchronous (non-blocking) behavior.










When to Use Which?
Use asynchronous (readFile and writeFile) 
when performance is important 
and you don't want to block other operations 
(e.g., in a server handling multiple requests).
Use synchronous (readFileSync and writeFileSync) 
when you need to ensure the file operation completes 
before moving forward, such as during startup 
configurations or scripts.